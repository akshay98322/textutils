{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","togleMode","role","htmlFor","TextForm","useState","text","setText","heading","placeholder","value","onChange","event","target","rows","newText","toUpperCase","showAlert","substring","toLowerCase","navigator","clipboard","writeText","split","join","filter","word","length","Alert","style","height","alert","msg","defaultProps","App","setMode","setAlert","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7eb65c20.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-dark bg-${props.mode==='light'?'primary':'dark'}`}>\r\n        \r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                    <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                    <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                    </li>\r\n                    \r\n                </ul>\r\n                <div className=\"form-check form-switch text-light\">\r\n                    <input className=\"form-check-input\"onClick={props.togleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark</label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n// PropTpyes Example\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string,\r\n}\r\n// Default Props Example\r\nNavbar.defaultProps = {\r\n    title: \"Default Title\",\r\n    aboutText: \"Default About\",\r\n  };\r\n","import React,{ useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n        // React Hooks - useState\r\n    const [text, setText] = useState('');\r\n    // conver the text to uppercase\r\n    const handleUpClick = () =>{\r\n        if (text !== \"\"){\r\n            let newText = text.toUpperCase();\r\n            setText(newText);\r\n            props.showAlert(\"Text converted to Uppercase.\", 'success')\r\n        } else {\r\n            props.showAlert(\"Please enter text first.\", 'danger')\r\n        }\r\n        \r\n    }\r\n    // conver the text to lowercase\r\n    const handleLoClick = () =>{\r\n        if (text !== \"\"){\r\n            let newText = text.toLowerCase();\r\n            setText(newText);\r\n            props.showAlert(\"Text converted to Lowercase.\", 'success')\r\n        } else {\r\n            props.showAlert(\"Please enter text first.\", 'danger')\r\n        }\r\n        \r\n    }\r\n    // Clear Text\r\n    const handleClClick = () =>{\r\n        if (text !== \"\"){\r\n            let newText = \"\";\r\n            setText(newText);\r\n            props.showAlert(\"Text cleared.\", 'success')\r\n        } else {\r\n            props.showAlert(\"No text to clear.\", 'danger')\r\n        }\r\n        \r\n    }\r\n    // Capatilize Text\r\n    const handleCapClick = () =>{\r\n        if (text !== \"\"){\r\n            let newText = text[0].toUpperCase() + text.substring(1).toLowerCase();\r\n            setText(newText);\r\n            props.showAlert(\"Text capitalized.\", 'success')\r\n        } else {\r\n            props.showAlert(\"Please enter text first.\", 'danger')\r\n        }\r\n    }\r\n    // Copy Text\r\n    const handleCopy= () =>{\r\n        if (text !== \"\"){\r\n            navigator.clipboard.writeText(text);\r\n            props.showAlert(\"Text copied to clipboard.\", 'success')\r\n        } else {\r\n            props.showAlert(\"No text to copy.\", 'danger')\r\n        }\r\n        \r\n    }\r\n    // Remove extra spaces\r\n    const handleRemoveSpace = ()=>{\r\n        if (text !== \"\"){\r\n            let newText = text.split(/[ ]+/).join(\" \");\r\n            setText(newText);\r\n            props.showAlert(\"Extra spaces removed.\", 'success')\r\n        } else {\r\n            props.showAlert(\"Please enter text first.\", 'danger')\r\n        }\r\n        \r\n    }\r\n\r\n    // to handle change in TextArea\r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value);\r\n        \r\n    }\r\n    const placeholder = 'Enter your text here.'\r\n    \r\n    // Rendering part\r\n    return (\r\n        <>\r\n        <div className='container' >\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                {/* rgb(21,32,43)!importan */}\r\n                <textarea className=\"form-control\" placeholder={placeholder} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>                \r\n            </div>   \r\n            <button className=\"btn btn-primary mx-1 my-2\" onClick={handleUpClick}>Upper</button>\r\n            <button className=\"btn btn-secondary mx-1 my-2\" onClick={handleCapClick}>Capitalize</button>  \r\n            <button className=\"btn btn-success mx-1 my-2\" onClick={handleLoClick}>Lower</button>\r\n            <button className=\"btn btn-danger mx-1 my-2\" onClick={handleClClick}>Clear</button>            \r\n            <button className=\"btn btn-warning mx-1 my-2\" onClick={handleCopy}>Copy</button>\r\n            <button className=\"btn btn-info mx-1 my-2\" onClick={handleRemoveSpace}>Remove Space</button>       \r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h2>Your Text summary</h2>\r\n            <p>Your text has {text.split(/\\s+/).filter((word) => {return word.length!==0}).length} words and {text.length} characters.</p>\r\n            <p>It will take {text.split(/\\s+/).filter((word) => {return word.length!==0}).length *0.008 } minutes to read</p>\r\n            <h4>Text Preview</h4>\r\n            <p>{text.length>0?text:\"Enter something in the the textbox to view here\"}</p>\r\n            \r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong>{props.alert.msg}</strong></div>}\r\n\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\r\nimport React,{ useState } from 'react'\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Route,\r\n//   Switch,\r\n// } from \"react-router-dom\";\r\n\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n// import About from './components/About';\r\nimport Alert from './components/Alert';\r\n\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null)\r\n\r\n  const showAlert = (msg, type) => {\r\n    setAlert({\r\n      msg: msg,\r\n      type: type})\r\n    setTimeout(() => {\r\n      setAlert(null)\r\n    }, 1000)\r\n  }\r\n  const togleMode = () => {\r\n    if (mode === \"light\"){\r\n        setMode(\"dark\");\r\n        document.body.style.backgroundColor = \"#ddd\";\r\n        showAlert(\"Dark Mode Enabled\", \"success\")\r\n    } else {\r\n        setMode(\"light\");\r\n        document.body.style.backgroundColor = \"white\";\r\n        showAlert(\"Light Mode Enabled\", \"success\")\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n    {/* <Router> */}\r\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} togleMode={togleMode}/>\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n    {/* <Switch>\r\n      <Route exact path=\"/about\"> */}\r\n        {/* <About mode={mode}/> */}\r\n      {/* </Route>\r\n      <Route exact path=\"/\"> */}\r\n      <TextForm heading=\"Enter the text to analize\" mode={mode} showAlert={showAlert}/>\r\n      {/* </Route>\r\n    </Switch>       */}\r\n    </div>    \r\n    {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}